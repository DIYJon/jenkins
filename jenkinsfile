@Library('jenkins_shared') _

pipeline{
    agent any
    stages{
        stage("Build"){
            steps{
                echo "Build"
                hello()
                helloVariable('Jon')
                script{
                    utils.printFromFunction()
                    utils.replaceString()
                }

            }
        }
        
        stage('Test on OS'){
            parallel{
                stage("Test on linux"){
                    steps{
                            sh """
                            bash ./build_search.sh `Something to see here! ${BUILD_NUMBER}` 
                            """
                        }
                        
                    }
                

                stage("Test on windows"){
                    steps{
                        echo "Windows"
                    }
                }
            }
        }
        stage("Package HTML"){
            steps{
                sh """
                    mkdir -p build
                    cp index.html build/index.html          
                    tar -zcvf build.tgz build
                """
            }            
        }

        stage("Archieve HTML"){
            steps{
                archiveArtifacts artifacts: 'build.tgz', followSymlinks: false
            }            
        }

        stage("SSH Copy"){
            steps{
                sshPublisher(publishers: [sshPublisherDesc(configName: 'SSH Server', transfers: [sshTransfer(cleanRemote: false, excludes: '', execCommand: 'tar -zxvf build.tgz && mv build/index.html /var/www/html/index.html', execTimeout: 120000, flatten: false, makeEmptyDirs: false, noDefaultExcludes: false, patternSeparator: '[, ]+', remoteDirectory: '', remoteDirectorySDF: false, removePrefix: '', sourceFiles: 'build.tgz')], usePromotionTimestamp: false, useWorkspaceInPromotion: false, verbose: false)])
            }            
        }
    }
    post{
        always{
            archiveArtifacts artifacts: 'build.tgz', followSymlinks: false
        }
    }
}